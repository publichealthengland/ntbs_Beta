// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ntbs_service.DataAccess;

namespace ntbs_service.Migrations
{
    [DbContext(typeof(NtbsContext))]
    [Migration("20210831150115_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlertStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClosingUserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("AlertId");

                    b.HasIndex("AlertStatus", "AlertType");

                    b.HasIndex("NotificationId", "AlertType");

                    b.ToTable("Alert");

                    b.HasDiscriminator<string>("AlertType");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.LegacyImportNotificationOutcome", b =>
                {
                    b.Property<int>("LegacyImportNotificationOutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegacyImportMigrationRunId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NtbsId")
                        .HasColumnType("int");

                    b.Property<string>("OldNotificationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("SuccessfullyMigrated")
                        .HasColumnType("bit");

                    b.HasKey("LegacyImportNotificationOutcomeId");

                    b.HasIndex("LegacyImportMigrationRunId");

                    b.ToTable("LegacyImportNotificationOutcome");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.CaseManagerTbService", b =>
                {
                    b.Property<int>("CaseManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TbServiceCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("CaseManagerId", "TbServiceCode");

                    b.HasIndex("TbServiceCode");

                    b.ToTable("CaseManagerTbService");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.DrugResistanceProfile", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("DrugResistanceProfileString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("No result");

                    b.Property<string>("Species")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("No result");

                    b.HasKey("NotificationId");

                    b.ToTable("DrugResistanceProfile");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.FrequentlyAskedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnchorLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestion");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.LegacyImportMigrationRun", b =>
                {
                    b.Property<int>("LegacyImportMigrationRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppRelease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegacyIdList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RangeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RangeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("LegacyImportMigrationRunId");

                    b.ToTable("LegacyImportMigrationRun");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.LegacyImportNotificationLogMessage", b =>
                {
                    b.Property<int>("LegacyImportNotificationLogMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegacyImportMigrationRunId")
                        .HasColumnType("int");

                    b.Property<string>("LogMessageLevel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldNotificationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LegacyImportNotificationLogMessageId");

                    b.HasIndex("LegacyImportMigrationRunId");

                    b.ToTable("LegacyImportNotificationLogMessage");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisAnimalExposure", b =>
                {
                    b.Property<int>("MBovisAnimalExposureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Animal")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("AnimalTbStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AnimalType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ExposureDuration")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("YearOfExposure")
                        .HasColumnType("int");

                    b.HasKey("MBovisAnimalExposureId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NotificationId");

                    b.ToTable("MBovisAnimalExposure");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisDetails", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("AnimalExposureStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ExposureToKnownCasesStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OccupationExposureStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UnpasteurisedMilkConsumptionStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("NotificationId");

                    b.ToTable("MBovisDetails");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisExposureToKnownCase", b =>
                {
                    b.Property<int>("MBovisExposureToKnownCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExposureNotificationId")
                        .HasColumnType("int");

                    b.Property<string>("ExposureSetting")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("NotifiedToPheStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("YearOfExposure")
                        .HasColumnType("int");

                    b.HasKey("MBovisExposureToKnownCaseId");

                    b.HasIndex("NotificationId");

                    b.ToTable("MBovisExposureToKnownCase");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisOccupationExposure", b =>
                {
                    b.Property<int>("MBovisOccupationExposureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationDuration")
                        .HasColumnType("int");

                    b.Property<string>("OccupationSetting")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("YearOfExposure")
                        .HasColumnType("int");

                    b.HasKey("MBovisOccupationExposureId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NotificationId");

                    b.ToTable("MBovisOccupationExposures");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisUnpasteurisedMilkConsumption", b =>
                {
                    b.Property<int>("MBovisUnpasteurisedMilkConsumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumptionFrequency")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("MilkProductType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("YearOfConsumption")
                        .HasColumnType("int");

                    b.HasKey("MBovisUnpasteurisedMilkConsumptionId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NotificationId");

                    b.ToTable("MBovisUnpasteurisedMilkConsumption");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.ManualTestResult", b =>
                {
                    b.Property<int>("ManualTestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ManualTestTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TestDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("ManualTestResultId");

                    b.HasIndex("ManualTestTypeId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SampleTypeId");

                    b.ToTable("ManualTestResult");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletionReason")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ETSID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LTBRID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LTBRPatientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LegacySource")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("ClusterId");

                    b.HasIndex("ETSID")
                        .IsUnique()
                        .HasFilter("[ETSID] IS NOT NULL");

                    b.HasIndex("GroupId");

                    b.HasIndex("LTBRID")
                        .IsUnique()
                        .HasFilter("[LTBRID] IS NOT NULL");

                    b.HasIndex("LTBRPatientId");

                    b.HasIndex("NotificationStatus");

                    b.HasIndex("NotificationStatus", "SubmissionDate");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.NotificationGroup", b =>
                {
                    b.Property<int>("NotificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("NotificationGroupId");

                    b.ToTable("NotificationGroup");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.NotificationSite", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("SiteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId", "SiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("NotificationSite");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.SocialContextAddress", b =>
                {
                    b.Property<int>("SocialContextAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialContextAddressId");

                    b.HasIndex("NotificationId");

                    b.ToTable("SocialContextAddress");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.SocialContextVenue", b =>
                {
                    b.Property<int>("SocialContextVenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VenueTypeId")
                        .HasColumnType("int");

                    b.HasKey("SocialContextVenueId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("VenueTypeId");

                    b.ToTable("SocialContextVenue");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.TestData", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasTestCarriedOut")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.TreatmentEvent", b =>
                {
                    b.Property<int>("TreatmentEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("TbServiceCode")
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("TreatmentEventType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TreatmentOutcomeId")
                        .HasColumnType("int");

                    b.HasKey("TreatmentEventId");

                    b.HasIndex("CaseManagerId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("TbServiceCode");

                    b.HasIndex("TreatmentOutcomeId");

                    b.ToTable("TreatmentEvent");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdGroups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailPrimary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailSecondary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCaseManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumberPrimary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumberSecondary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.UserLoginEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("UserLoginEvent");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.VenueType", b =>
                {
                    b.Property<int>("VenueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueTypeId");

                    b.ToTable("VenueType", "ReferenceData");

                    b.HasData(
                        new
                        {
                            VenueTypeId = 1,
                            Category = "Workplace",
                            Name = "Armed forces"
                        },
                        new
                        {
                            VenueTypeId = 2,
                            Category = "Workplace",
                            Name = "Catering"
                        },
                        new
                        {
                            VenueTypeId = 3,
                            Category = "Workplace",
                            Name = "Construction"
                        },
                        new
                        {
                            VenueTypeId = 4,
                            Category = "Workplace",
                            Name = "Driving"
                        },
                        new
                        {
                            VenueTypeId = 5,
                            Category = "Workplace",
                            Name = "Education"
                        },
                        new
                        {
                            VenueTypeId = 6,
                            Category = "Workplace",
                            Name = "Emergency services"
                        },
                        new
                        {
                            VenueTypeId = 7,
                            Category = "Workplace",
                            Name = "Factory"
                        },
                        new
                        {
                            VenueTypeId = 8,
                            Category = "Workplace",
                            Name = "Farming"
                        },
                        new
                        {
                            VenueTypeId = 9,
                            Category = "Workplace",
                            Name = "Hospital or medical centre"
                        },
                        new
                        {
                            VenueTypeId = 10,
                            Category = "Workplace",
                            Name = "Office"
                        },
                        new
                        {
                            VenueTypeId = 11,
                            Category = "Workplace",
                            Name = "Pub, bar or club"
                        },
                        new
                        {
                            VenueTypeId = 12,
                            Category = "Workplace",
                            Name = "Restaurant or cafe"
                        },
                        new
                        {
                            VenueTypeId = 13,
                            Category = "Workplace",
                            Name = "Hospitality"
                        },
                        new
                        {
                            VenueTypeId = 14,
                            Category = "Workplace",
                            Name = "Retail"
                        },
                        new
                        {
                            VenueTypeId = 15,
                            Category = "Workplace",
                            Name = "Warehouse"
                        },
                        new
                        {
                            VenueTypeId = 16,
                            Category = "Workplace",
                            Name = "Hair/beauty salon"
                        },
                        new
                        {
                            VenueTypeId = 17,
                            Category = "Workplace",
                            Name = "Health club or spa"
                        },
                        new
                        {
                            VenueTypeId = 18,
                            Category = "Workplace",
                            Name = "Recreational centre"
                        },
                        new
                        {
                            VenueTypeId = 19,
                            Category = "Workplace",
                            Name = "Other workplace"
                        },
                        new
                        {
                            VenueTypeId = 20,
                            Category = "Place of worship",
                            Name = "Church"
                        },
                        new
                        {
                            VenueTypeId = 21,
                            Category = "Place of worship",
                            Name = "Temple"
                        },
                        new
                        {
                            VenueTypeId = 22,
                            Category = "Place of worship",
                            Name = "Mosque"
                        },
                        new
                        {
                            VenueTypeId = 23,
                            Category = "Place of worship",
                            Name = "Community centre"
                        },
                        new
                        {
                            VenueTypeId = 24,
                            Category = "Place of worship",
                            Name = "Multi-faith centre"
                        },
                        new
                        {
                            VenueTypeId = 25,
                            Category = "Place of worship",
                            Name = "Synagogue"
                        },
                        new
                        {
                            VenueTypeId = 26,
                            Category = "Place of worship",
                            Name = "Other place of worship"
                        },
                        new
                        {
                            VenueTypeId = 27,
                            Category = "Social",
                            Name = "Arcade/gambling venue"
                        },
                        new
                        {
                            VenueTypeId = 28,
                            Category = "Social",
                            Name = "Pub, bar or club"
                        },
                        new
                        {
                            VenueTypeId = 29,
                            Category = "Social",
                            Name = "Restaurant or cafe"
                        },
                        new
                        {
                            VenueTypeId = 30,
                            Category = "Social",
                            Name = "Library"
                        },
                        new
                        {
                            VenueTypeId = 31,
                            Category = "Social",
                            Name = "Cinema"
                        },
                        new
                        {
                            VenueTypeId = 32,
                            Category = "Social",
                            Name = "Shopping centre"
                        },
                        new
                        {
                            VenueTypeId = 33,
                            Category = "Social",
                            Name = "Hair/beauty salon"
                        },
                        new
                        {
                            VenueTypeId = 34,
                            Category = "Social",
                            Name = "Health club or spa"
                        },
                        new
                        {
                            VenueTypeId = 35,
                            Category = "Social",
                            Name = "Exercise class"
                        },
                        new
                        {
                            VenueTypeId = 36,
                            Category = "Social",
                            Name = "Recreational centre"
                        },
                        new
                        {
                            VenueTypeId = 37,
                            Category = "Social",
                            Name = "Music classes"
                        },
                        new
                        {
                            VenueTypeId = 38,
                            Category = "Social",
                            Name = "Community centre"
                        },
                        new
                        {
                            VenueTypeId = 39,
                            Category = "Social",
                            Name = "Job/unemployment centre"
                        },
                        new
                        {
                            VenueTypeId = 40,
                            Category = "Social",
                            Name = "Crack house/smoking den"
                        },
                        new
                        {
                            VenueTypeId = 41,
                            Category = "Social",
                            Name = "Friends house"
                        },
                        new
                        {
                            VenueTypeId = 42,
                            Category = "Social",
                            Name = "Other social venue"
                        },
                        new
                        {
                            VenueTypeId = 43,
                            Category = "Childcare & education",
                            Name = "Pre-school or play group"
                        },
                        new
                        {
                            VenueTypeId = 44,
                            Category = "Childcare & education",
                            Name = "Nursery"
                        },
                        new
                        {
                            VenueTypeId = 45,
                            Category = "Childcare & education",
                            Name = "Primary school"
                        },
                        new
                        {
                            VenueTypeId = 46,
                            Category = "Childcare & education",
                            Name = "Secondary school"
                        },
                        new
                        {
                            VenueTypeId = 47,
                            Category = "Childcare & education",
                            Name = "College or sixth form"
                        },
                        new
                        {
                            VenueTypeId = 48,
                            Category = "Childcare & education",
                            Name = "After school clubs"
                        },
                        new
                        {
                            VenueTypeId = 49,
                            Category = "Childcare & education",
                            Name = "University"
                        },
                        new
                        {
                            VenueTypeId = 50,
                            Category = "Childcare & education",
                            Name = "Adult education"
                        },
                        new
                        {
                            VenueTypeId = 51,
                            Category = "Childcare & education",
                            Name = "Private tutoring"
                        },
                        new
                        {
                            VenueTypeId = 52,
                            Category = "Childcare & education",
                            Name = "Religious learning centre"
                        },
                        new
                        {
                            VenueTypeId = 53,
                            Category = "Childcare & education",
                            Name = "Other childcare & education"
                        },
                        new
                        {
                            VenueTypeId = 54,
                            Category = "Place of detention",
                            Name = "Immigration detention centre"
                        },
                        new
                        {
                            VenueTypeId = 55,
                            Category = "Place of detention",
                            Name = "Prison"
                        },
                        new
                        {
                            VenueTypeId = 56,
                            Category = "Place of detention",
                            Name = "Youth detention centre"
                        },
                        new
                        {
                            VenueTypeId = 57,
                            Category = "Place of detention",
                            Name = "Other place of detention"
                        },
                        new
                        {
                            VenueTypeId = 58,
                            Category = "Treatment and rehab",
                            Name = "Alcohol rehabilitation centre"
                        },
                        new
                        {
                            VenueTypeId = 59,
                            Category = "Treatment and rehab",
                            Name = "Drug rehabilitation centre"
                        },
                        new
                        {
                            VenueTypeId = 60,
                            Category = "Treatment and rehab",
                            Name = "Medical or physical rehabilitation centre"
                        },
                        new
                        {
                            VenueTypeId = 61,
                            Category = "Treatment and rehab",
                            Name = "Mental health rehabilitation centre"
                        },
                        new
                        {
                            VenueTypeId = 62,
                            Category = "Treatment and rehab",
                            Name = "Other treatment or rehab centre"
                        },
                        new
                        {
                            VenueTypeId = 63,
                            Category = "Health and care",
                            Name = "Crisis centre or refuge"
                        },
                        new
                        {
                            VenueTypeId = 64,
                            Category = "Residential",
                            Name = "Initial accommodation centre "
                        },
                        new
                        {
                            VenueTypeId = 65,
                            Category = "Residential",
                            Name = "Dispersal accommodation "
                        },
                        new
                        {
                            VenueTypeId = 66,
                            Category = "Residential",
                            Name = "Homeless shelter"
                        },
                        new
                        {
                            VenueTypeId = 67,
                            Category = "Residential",
                            Name = "Squat"
                        },
                        new
                        {
                            VenueTypeId = 68,
                            Category = "Residential",
                            Name = "Care home"
                        },
                        new
                        {
                            VenueTypeId = 69,
                            Category = "Residential",
                            Name = "Halfway house"
                        },
                        new
                        {
                            VenueTypeId = 70,
                            Category = "Residential",
                            Name = "Hostel"
                        },
                        new
                        {
                            VenueTypeId = 71,
                            Category = "Residential",
                            Name = "Hall of residence"
                        },
                        new
                        {
                            VenueTypeId = 72,
                            Category = "Residential",
                            Name = "Sofa surfing"
                        },
                        new
                        {
                            VenueTypeId = 73,
                            Category = "Residential",
                            Name = "Other residential"
                        },
                        new
                        {
                            VenueTypeId = 74,
                            Category = "Health and care",
                            Name = "Hospital"
                        },
                        new
                        {
                            VenueTypeId = 75,
                            Category = "Health and care",
                            Name = "Walk-in Centre/Minor Injuries"
                        },
                        new
                        {
                            VenueTypeId = 76,
                            Category = "Health and care",
                            Name = "Pharmacy"
                        },
                        new
                        {
                            VenueTypeId = 77,
                            Category = "Health and care",
                            Name = "GP Practice"
                        },
                        new
                        {
                            VenueTypeId = 78,
                            Category = "Health and care",
                            Name = "Nursing Home"
                        },
                        new
                        {
                            VenueTypeId = 79,
                            Category = "Health and care",
                            Name = "Hospice"
                        },
                        new
                        {
                            VenueTypeId = 80,
                            Category = "Health and care",
                            Name = "Health Centre/Clinic"
                        },
                        new
                        {
                            VenueTypeId = 81,
                            Category = "Health and care",
                            Name = "Other heathcare"
                        },
                        new
                        {
                            VenueTypeId = 82,
                            Category = "Transport",
                            Name = "Car"
                        },
                        new
                        {
                            VenueTypeId = 83,
                            Category = "Transport",
                            Name = "Bus"
                        },
                        new
                        {
                            VenueTypeId = 84,
                            Category = "Transport",
                            Name = "Train"
                        },
                        new
                        {
                            VenueTypeId = 85,
                            Category = "Transport",
                            Name = "Tram"
                        },
                        new
                        {
                            VenueTypeId = 86,
                            Category = "Transport",
                            Name = "Metro"
                        },
                        new
                        {
                            VenueTypeId = 87,
                            Category = "Transport",
                            Name = "Plane"
                        },
                        new
                        {
                            VenueTypeId = 88,
                            Category = "Transport",
                            Name = "Taxi"
                        },
                        new
                        {
                            VenueTypeId = 89,
                            Category = "Transport",
                            Name = "Boat"
                        },
                        new
                        {
                            VenueTypeId = 90,
                            Category = "Transport",
                            Name = "Cruise ship"
                        },
                        new
                        {
                            VenueTypeId = 91,
                            Category = "Transport",
                            Name = "Other transport"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.QueryEntities.NotificationAndDuplicateIds", b =>
                {
                    b.Property<int>("DuplicateId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.ToTable("NotificationAndDuplicateIds");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasHighTbOccurence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegacy")
                        .HasColumnType("bit");

                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.HasIndex("IsLegacy", "Name");

                    b.ToTable("Country", "ReferenceData");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            CountryId = 2,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AX",
                            Name = "Åland Islands"
                        },
                        new
                        {
                            CountryId = 3,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            CountryId = 4,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            CountryId = 5,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            CountryId = 6,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            CountryId = 7,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            CountryId = 8,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            CountryId = 9,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            CountryId = 10,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            CountryId = 11,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            CountryId = 12,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            CountryId = 13,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            CountryId = 14,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            CountryId = 15,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            CountryId = 16,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            CountryId = 17,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            CountryId = 18,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            CountryId = 19,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            CountryId = 20,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            CountryId = 21,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            CountryId = 22,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            CountryId = 23,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            CountryId = 24,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            CountryId = 25,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            CountryId = 26,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            CountryId = 27,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            CountryId = 28,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = 29,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            CountryId = 30,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            CountryId = 31,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            CountryId = 32,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            CountryId = 33,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            CountryId = 34,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            CountryId = 35,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = 36,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            CountryId = 37,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            CountryId = 38,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            CountryId = 39,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            CountryId = 40,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            CountryId = 41,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            CountryId = 42,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            CountryId = 43,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            CountryId = 44,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            CountryId = 45,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CN",
                            Name = "China"
                        },
                        new
                        {
                            CountryId = 46,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            CountryId = 47,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            CountryId = 48,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            CountryId = 49,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            CountryId = 50,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            CountryId = 51,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CD",
                            Name = "Congo, Democratic Republic of the"
                        },
                        new
                        {
                            CountryId = 52,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            CountryId = 53,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            CountryId = 54,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CI",
                            Name = "Côte D'ivoire"
                        },
                        new
                        {
                            CountryId = 55,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            CountryId = 56,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            CountryId = 57,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            CountryId = 58,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            CountryId = 59,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            CountryId = 60,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            CountryId = 61,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            CountryId = 62,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = 63,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            CountryId = 64,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            CountryId = 65,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            CountryId = 66,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = 67,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            CountryId = 68,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            CountryId = 69,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            CountryId = 70,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "FK",
                            Name = "Falkland Islands (Malvinas)"
                        },
                        new
                        {
                            CountryId = 71,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            CountryId = 72,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            CountryId = 73,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            CountryId = 74,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            CountryId = 75,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            CountryId = 76,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            CountryId = 77,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            CountryId = 78,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            CountryId = 79,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            CountryId = 80,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            CountryId = 81,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            CountryId = 82,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            CountryId = 83,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            CountryId = 84,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            CountryId = 85,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            CountryId = 86,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            CountryId = 87,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            CountryId = 88,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            CountryId = 89,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            CountryId = 90,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            CountryId = 91,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            CountryId = 92,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            CountryId = 93,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            CountryId = 94,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            CountryId = 95,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HM",
                            Name = "Heard Island and Mcdonald Islands"
                        },
                        new
                        {
                            CountryId = 96,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "VA",
                            Name = "Holy See (Vatican City State)"
                        },
                        new
                        {
                            CountryId = 97,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            CountryId = 98,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            CountryId = 99,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            CountryId = 100,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            CountryId = 101,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            CountryId = 102,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            CountryId = 103,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "IR",
                            Name = "Iran, Islamic Republic of"
                        },
                        new
                        {
                            CountryId = 104,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            CountryId = 105,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            CountryId = 106,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "IM",
                            Name = "Isle Of Man"
                        },
                        new
                        {
                            CountryId = 107,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            CountryId = 108,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            CountryId = 109,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            CountryId = 110,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            CountryId = 111,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            CountryId = 112,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            CountryId = 113,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            CountryId = 114,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            CountryId = 115,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            CountryId = 116,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KP",
                            Name = "Korea, Democratic People's Republic of"
                        },
                        new
                        {
                            CountryId = 117,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KR",
                            Name = "Korea, Republic of"
                        },
                        new
                        {
                            CountryId = 118,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "XK",
                            Name = "Kosovo"
                        },
                        new
                        {
                            CountryId = 119,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            CountryId = 120,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            CountryId = 121,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LA",
                            Name = "Lao People's Democratic Republic"
                        },
                        new
                        {
                            CountryId = 122,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            CountryId = 123,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            CountryId = 124,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            CountryId = 125,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            CountryId = 126,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LY",
                            Name = "Libyan Arab Jamahiriya"
                        },
                        new
                        {
                            CountryId = 127,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            CountryId = 128,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            CountryId = 129,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            CountryId = 130,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MO",
                            Name = "Macao"
                        },
                        new
                        {
                            CountryId = 131,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            CountryId = 132,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            CountryId = 133,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            CountryId = 134,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            CountryId = 135,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            CountryId = 136,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            CountryId = 137,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            CountryId = 138,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            CountryId = 139,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            CountryId = 140,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            CountryId = 141,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            CountryId = 142,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            CountryId = 143,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            CountryId = 144,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "FM",
                            Name = "Micronesia, Federated States of"
                        },
                        new
                        {
                            CountryId = 145,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            CountryId = 146,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            CountryId = 147,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            CountryId = 148,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            CountryId = 149,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            CountryId = 150,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            CountryId = 151,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            CountryId = 152,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            CountryId = 153,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            CountryId = 154,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            CountryId = 155,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            CountryId = 156,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            CountryId = 157,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AN",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            CountryId = 158,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            CountryId = 159,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            CountryId = 160,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            CountryId = 161,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            CountryId = 162,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            CountryId = 163,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            CountryId = 164,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            CountryId = 165,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            CountryId = 166,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            CountryId = 167,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            CountryId = 168,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "  ",
                            Name = "Other"
                        },
                        new
                        {
                            CountryId = 169,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            CountryId = 170,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            CountryId = 171,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PS",
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            CountryId = 172,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            CountryId = 173,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = 174,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            CountryId = 175,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            CountryId = 176,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            CountryId = 177,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            CountryId = 178,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            CountryId = 179,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            CountryId = 180,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            CountryId = 181,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            CountryId = 182,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "RE",
                            Name = "Reunion"
                        },
                        new
                        {
                            CountryId = 183,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            CountryId = 184,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "RU",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            CountryId = 185,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            CountryId = 186,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "BL",
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            CountryId = 187,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SH",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            CountryId = 188,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            CountryId = 189,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            CountryId = 190,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "MF",
                            Name = "Saint Martin"
                        },
                        new
                        {
                            CountryId = 191,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            CountryId = 192,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VC",
                            Name = "Saint Vincent and The Grenadines"
                        },
                        new
                        {
                            CountryId = 193,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            CountryId = 194,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            CountryId = 195,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            CountryId = 196,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            CountryId = 197,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            CountryId = 198,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            CountryId = 199,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            CountryId = 200,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            CountryId = 201,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            CountryId = 202,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            CountryId = 203,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            CountryId = 204,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            CountryId = 205,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            CountryId = 206,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            CountryId = 207,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "GS",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            CountryId = 208,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SSD",
                            Name = "South Sudan"
                        },
                        new
                        {
                            CountryId = 209,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            CountryId = 210,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = 211,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            CountryId = 212,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            CountryId = 213,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SJ",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            CountryId = 214,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            CountryId = 215,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            CountryId = 216,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            CountryId = 217,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "SY",
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            CountryId = 218,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TW",
                            Name = "Taiwan, Province of China"
                        },
                        new
                        {
                            CountryId = 219,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            CountryId = 220,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TZ",
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            CountryId = 221,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            CountryId = 222,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            CountryId = 223,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            CountryId = 224,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            CountryId = 225,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            CountryId = 226,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            CountryId = 227,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            CountryId = 228,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            CountryId = 229,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            CountryId = 230,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TC",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            CountryId = 231,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            CountryId = 232,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            CountryId = 233,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            CountryId = 234,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            CountryId = 235,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            CountryId = 236,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "US",
                            Name = "United States"
                        },
                        new
                        {
                            CountryId = 237,
                            HasHighTbOccurence = false,
                            IsLegacy = false,
                            IsoCode = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            CountryId = 238,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "-",
                            Name = "Unknown"
                        },
                        new
                        {
                            CountryId = 239,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            CountryId = 240,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            CountryId = 241,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            CountryId = 242,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            CountryId = 243,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VN",
                            Name = "Viet Nam"
                        },
                        new
                        {
                            CountryId = 244,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VG",
                            Name = "Virgin Islands, British"
                        },
                        new
                        {
                            CountryId = 245,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "VI",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            CountryId = 246,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "WF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            CountryId = 247,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            CountryId = 248,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            CountryId = 249,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            CountryId = 250,
                            HasHighTbOccurence = true,
                            IsLegacy = false,
                            IsoCode = "ZW",
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            CountryId = 251,
                            HasHighTbOccurence = false,
                            IsLegacy = true,
                            IsoCode = "CS",
                            Name = "Serbia & Montenegro"
                        },
                        new
                        {
                            CountryId = 252,
                            HasHighTbOccurence = false,
                            IsLegacy = true,
                            IsoCode = "YU",
                            Name = "Yugoslavia"
                        },
                        new
                        {
                            CountryId = 253,
                            HasHighTbOccurence = false,
                            IsLegacy = true,
                            IsoCode = "ZR",
                            Name = "Zaire"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Ethnicity", b =>
                {
                    b.Property<int>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("EthnicityId");

                    b.ToTable("Ethnicity", "ReferenceData");

                    b.HasData(
                        new
                        {
                            EthnicityId = 1,
                            Code = "WW",
                            Label = "White",
                            Order = 1
                        },
                        new
                        {
                            EthnicityId = 8,
                            Code = "H",
                            Label = "Indian",
                            Order = 2
                        },
                        new
                        {
                            EthnicityId = 9,
                            Code = "J",
                            Label = "Pakistani",
                            Order = 3
                        },
                        new
                        {
                            EthnicityId = 10,
                            Code = "K",
                            Label = "Bangladeshi",
                            Order = 4
                        },
                        new
                        {
                            EthnicityId = 11,
                            Code = "L",
                            Label = "Any other Asian background",
                            Order = 5
                        },
                        new
                        {
                            EthnicityId = 13,
                            Code = "N",
                            Label = "Black African",
                            Order = 6
                        },
                        new
                        {
                            EthnicityId = 12,
                            Code = "M",
                            Label = "Black Caribbean",
                            Order = 7
                        },
                        new
                        {
                            EthnicityId = 14,
                            Code = "P",
                            Label = "Any other Black Background",
                            Order = 8
                        },
                        new
                        {
                            EthnicityId = 16,
                            Code = "R",
                            Label = "Chinese",
                            Order = 9
                        },
                        new
                        {
                            EthnicityId = 6,
                            Code = "F",
                            Label = "Mixed - White and Asian",
                            Order = 10
                        },
                        new
                        {
                            EthnicityId = 5,
                            Code = "E",
                            Label = "Mixed - White and Black African",
                            Order = 11
                        },
                        new
                        {
                            EthnicityId = 4,
                            Code = "D",
                            Label = "Mixed - White and Black Caribbean",
                            Order = 12
                        },
                        new
                        {
                            EthnicityId = 7,
                            Code = "G",
                            Label = "Any other mixed background",
                            Order = 13
                        },
                        new
                        {
                            EthnicityId = 15,
                            Code = "S",
                            Label = "Any other ethnic group",
                            Order = 14
                        },
                        new
                        {
                            EthnicityId = 17,
                            Code = "Z",
                            Label = "Not stated",
                            Order = 15
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Hospital", b =>
                {
                    b.Property<Guid>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsLegacy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TBServiceCode")
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("HospitalId");

                    b.HasIndex("TBServiceCode");

                    b.ToTable("Hospital", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.LocalAuthority", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("LocalAuthority", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.LocalAuthorityToPHEC", b =>
                {
                    b.Property<string>("PHECCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocalAuthorityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PHECCode", "LocalAuthorityCode");

                    b.HasIndex("LocalAuthorityCode")
                        .IsUnique();

                    b.ToTable("LocalAuthorityToPHEC", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.ManualTestType", b =>
                {
                    b.Property<int>("ManualTestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ManualTestTypeId");

                    b.ToTable("ManualTestType", "ReferenceData");

                    b.HasData(
                        new
                        {
                            ManualTestTypeId = 1,
                            Description = "Smear"
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            Description = "Culture"
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            Description = "Histology"
                        },
                        new
                        {
                            ManualTestTypeId = 4,
                            Description = "Chest x-ray"
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            Description = "PCR"
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            Description = "Line probe assay"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.ManualTestTypeSampleType", b =>
                {
                    b.Property<int>("ManualTestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SampleTypeId")
                        .HasColumnType("int");

                    b.HasKey("ManualTestTypeId", "SampleTypeId");

                    b.HasIndex("SampleTypeId");

                    b.ToTable("ManualTestTypeSampleType", "ReferenceData");

                    b.HasData(
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 1
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 2
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 3
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 4
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 5
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 6
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 7
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 9
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 10
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 11
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 14
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 15
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 16
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 18
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 19
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 21
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 22
                        },
                        new
                        {
                            ManualTestTypeId = 1,
                            SampleTypeId = 23
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 1
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 2
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 3
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 4
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 5
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 6
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 7
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 9
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 10
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 11
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 14
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 15
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 16
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 18
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 19
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 21
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 22
                        },
                        new
                        {
                            ManualTestTypeId = 2,
                            SampleTypeId = 23
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 2
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 3
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 7
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 8
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 12
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 13
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 15
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 17
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 20
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 22
                        },
                        new
                        {
                            ManualTestTypeId = 3,
                            SampleTypeId = 23
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 1
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 2
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 3
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 4
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 5
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 6
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 7
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 9
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 10
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 11
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 14
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 15
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 16
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 18
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 19
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 21
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 22
                        },
                        new
                        {
                            ManualTestTypeId = 5,
                            SampleTypeId = 23
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 1
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 2
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 3
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 4
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 5
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 6
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 7
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 9
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 10
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 11
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 14
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 15
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 16
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 18
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 19
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 21
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 22
                        },
                        new
                        {
                            ManualTestTypeId = 6,
                            SampleTypeId = 23
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasFreeTextField")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Sector")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("OccupationId");

                    b.ToTable("Occupation", "ReferenceData");

                    b.HasData(
                        new
                        {
                            OccupationId = 1,
                            HasFreeTextField = false,
                            Role = "Works with cattle",
                            Sector = "Agricultural/animal care"
                        },
                        new
                        {
                            OccupationId = 2,
                            HasFreeTextField = false,
                            Role = "Works with wild animals",
                            Sector = "Agricultural/animal care"
                        },
                        new
                        {
                            OccupationId = 3,
                            HasFreeTextField = false,
                            Role = "Other",
                            Sector = "Agricultural/animal care"
                        },
                        new
                        {
                            OccupationId = 4,
                            HasFreeTextField = false,
                            Role = "Full-time student",
                            Sector = "Education"
                        },
                        new
                        {
                            OccupationId = 5,
                            HasFreeTextField = false,
                            Role = "Lecturer",
                            Sector = "Education"
                        },
                        new
                        {
                            OccupationId = 6,
                            HasFreeTextField = false,
                            Role = "Teacher incl. nursery",
                            Sector = "Education"
                        },
                        new
                        {
                            OccupationId = 7,
                            HasFreeTextField = false,
                            Role = "Other",
                            Sector = "Education"
                        },
                        new
                        {
                            OccupationId = 8,
                            HasFreeTextField = false,
                            Role = "Community care worker",
                            Sector = "Health care"
                        },
                        new
                        {
                            OccupationId = 9,
                            HasFreeTextField = false,
                            Role = "Dentist",
                            Sector = "Health care"
                        },
                        new
                        {
                            OccupationId = 10,
                            HasFreeTextField = false,
                            Role = "Doctor",
                            Sector = "Health care"
                        },
                        new
                        {
                            OccupationId = 11,
                            HasFreeTextField = false,
                            Role = "Nurse",
                            Sector = "Health care"
                        },
                        new
                        {
                            OccupationId = 12,
                            HasFreeTextField = false,
                            Role = "Other",
                            Sector = "Health care"
                        },
                        new
                        {
                            OccupationId = 13,
                            HasFreeTextField = false,
                            Role = "Laboratory staff",
                            Sector = "Laboratory/Pathology"
                        },
                        new
                        {
                            OccupationId = 14,
                            HasFreeTextField = false,
                            Role = "Microbiologist",
                            Sector = "Laboratory/Pathology"
                        },
                        new
                        {
                            OccupationId = 15,
                            HasFreeTextField = false,
                            Role = "Pathologist",
                            Sector = "Laboratory/Pathology"
                        },
                        new
                        {
                            OccupationId = 16,
                            HasFreeTextField = false,
                            Role = "PM attendant",
                            Sector = "Laboratory/Pathology"
                        },
                        new
                        {
                            OccupationId = 17,
                            HasFreeTextField = false,
                            Role = "Other",
                            Sector = "Laboratory/Pathology"
                        },
                        new
                        {
                            OccupationId = 18,
                            HasFreeTextField = false,
                            Role = "Homeless sector worker",
                            Sector = "Social/prison service"
                        },
                        new
                        {
                            OccupationId = 19,
                            HasFreeTextField = false,
                            Role = "Prison/detention official",
                            Sector = "Social/prison service"
                        },
                        new
                        {
                            OccupationId = 20,
                            HasFreeTextField = false,
                            Role = "Probation officer",
                            Sector = "Social/prison service"
                        },
                        new
                        {
                            OccupationId = 21,
                            HasFreeTextField = false,
                            Role = "Social worker",
                            Sector = "Social/prison service"
                        },
                        new
                        {
                            OccupationId = 22,
                            HasFreeTextField = false,
                            Role = "Other",
                            Sector = "Social/prison service"
                        },
                        new
                        {
                            OccupationId = 23,
                            HasFreeTextField = false,
                            Role = "Child",
                            Sector = "Other"
                        },
                        new
                        {
                            OccupationId = 24,
                            HasFreeTextField = false,
                            Role = "Housewife/househusband",
                            Sector = "Other"
                        },
                        new
                        {
                            OccupationId = 25,
                            HasFreeTextField = false,
                            Role = "Prisoner",
                            Sector = "Other"
                        },
                        new
                        {
                            OccupationId = 26,
                            HasFreeTextField = false,
                            Role = "Retired",
                            Sector = "Other"
                        },
                        new
                        {
                            OccupationId = 27,
                            HasFreeTextField = false,
                            Role = "Unemployed",
                            Sector = "Other"
                        },
                        new
                        {
                            OccupationId = 28,
                            HasFreeTextField = true,
                            Role = "Other",
                            Sector = "Other"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.PHEC", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdGroup")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("PHEC", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.PostcodeLookup", b =>
                {
                    b.Property<string>("Postcode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAuthorityCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PCT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Postcode");

                    b.HasIndex("LocalAuthorityCode");

                    b.ToTable("PostcodeLookup", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.SampleType", b =>
                {
                    b.Property<int>("SampleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SampleTypeId");

                    b.ToTable("SampleType", "ReferenceData");

                    b.HasData(
                        new
                        {
                            SampleTypeId = 1,
                            Category = "Respiratory",
                            Description = "Bronchial washings"
                        },
                        new
                        {
                            SampleTypeId = 2,
                            Category = "Respiratory",
                            Description = "Bronchoscopy sample"
                        },
                        new
                        {
                            SampleTypeId = 3,
                            Category = "Respiratory",
                            Description = "Lung bronchial tree tissue"
                        },
                        new
                        {
                            SampleTypeId = 4,
                            Category = "Respiratory",
                            Description = "Sputum (induced)"
                        },
                        new
                        {
                            SampleTypeId = 5,
                            Category = "Respiratory",
                            Description = "Sputum (spontaneous)"
                        },
                        new
                        {
                            SampleTypeId = 6,
                            Category = "Non-Respiratory",
                            Description = "Blood"
                        },
                        new
                        {
                            SampleTypeId = 7,
                            Category = "Non-Respiratory",
                            Description = "Bone and joint"
                        },
                        new
                        {
                            SampleTypeId = 8,
                            Category = "Non-Respiratory",
                            Description = "CNS"
                        },
                        new
                        {
                            SampleTypeId = 9,
                            Category = "Non-Respiratory",
                            Description = "CSF"
                        },
                        new
                        {
                            SampleTypeId = 10,
                            Category = "Non-Respiratory",
                            Description = "Faeces"
                        },
                        new
                        {
                            SampleTypeId = 11,
                            Category = "Non-Respiratory",
                            Description = "Gastric washings"
                        },
                        new
                        {
                            SampleTypeId = 12,
                            Category = "Non-Respiratory",
                            Description = "Gastrointestinal"
                        },
                        new
                        {
                            SampleTypeId = 13,
                            Category = "Non-Respiratory",
                            Description = "Genitourinary"
                        },
                        new
                        {
                            SampleTypeId = 14,
                            Category = "Non-Respiratory",
                            Description = "Gynaecological"
                        },
                        new
                        {
                            SampleTypeId = 15,
                            Category = "Non-Respiratory",
                            Description = "Lymph node"
                        },
                        new
                        {
                            SampleTypeId = 16,
                            Category = "Non-Respiratory",
                            Description = "Peritoneal fluid"
                        },
                        new
                        {
                            SampleTypeId = 17,
                            Category = "Non-Respiratory",
                            Description = "Pleural"
                        },
                        new
                        {
                            SampleTypeId = 18,
                            Category = "Non-Respiratory",
                            Description = "Pleural fluid or biopsy"
                        },
                        new
                        {
                            SampleTypeId = 19,
                            Category = "Non-Respiratory",
                            Description = "Pus"
                        },
                        new
                        {
                            SampleTypeId = 20,
                            Category = "Non-Respiratory",
                            Description = "Skin"
                        },
                        new
                        {
                            SampleTypeId = 21,
                            Category = "Non-Respiratory",
                            Description = "Urine"
                        },
                        new
                        {
                            SampleTypeId = 22,
                            Category = "Non-Respiratory",
                            Description = "Other tissues"
                        },
                        new
                        {
                            SampleTypeId = 23,
                            Category = "Non-Respiratory",
                            Description = "Not known"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Sex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SexId");

                    b.ToTable("Sex", "ReferenceData");

                    b.HasData(
                        new
                        {
                            SexId = 1,
                            Label = "Male"
                        },
                        new
                        {
                            SexId = 2,
                            Label = "Female"
                        },
                        new
                        {
                            SexId = 3,
                            Label = "Unknown"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteId");

                    b.ToTable("Site", "ReferenceData");

                    b.HasData(
                        new
                        {
                            SiteId = 1,
                            Description = "Pulmonary"
                        },
                        new
                        {
                            SiteId = 2,
                            Description = "Spine"
                        },
                        new
                        {
                            SiteId = 3,
                            Description = "Bone/joint: Other"
                        },
                        new
                        {
                            SiteId = 4,
                            Description = "Meningitis"
                        },
                        new
                        {
                            SiteId = 5,
                            Description = "CNS: Other"
                        },
                        new
                        {
                            SiteId = 6,
                            Description = "Ocular"
                        },
                        new
                        {
                            SiteId = 7,
                            Description = "Cryptic disseminated"
                        },
                        new
                        {
                            SiteId = 8,
                            Description = "Gastrointestinal/peritoneal"
                        },
                        new
                        {
                            SiteId = 9,
                            Description = "Genitourinary"
                        },
                        new
                        {
                            SiteId = 10,
                            Description = "Lymph nodes: Intra-thoracic"
                        },
                        new
                        {
                            SiteId = 11,
                            Description = "Lymph nodes: Extra-thoracic"
                        },
                        new
                        {
                            SiteId = 12,
                            Description = "Laryngeal"
                        },
                        new
                        {
                            SiteId = 13,
                            Description = "Miliary"
                        },
                        new
                        {
                            SiteId = 14,
                            Description = "Pleural"
                        },
                        new
                        {
                            SiteId = 15,
                            Description = "Pericardial"
                        },
                        new
                        {
                            SiteId = 16,
                            Description = "Soft tissue/Skin"
                        },
                        new
                        {
                            SiteId = 17,
                            Description = "Other extra-pulmonary"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.TBService", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("IsLegacy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PHECCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceAdGroup")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.HasIndex("PHECCode");

                    b.HasIndex("ServiceAdGroup")
                        .IsUnique()
                        .HasFilter("[ServiceAdGroup] IS NOT NULL");

                    b.HasIndex("IsLegacy", "Name");

                    b.ToTable("TbService", "ReferenceData");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.TreatmentOutcome", b =>
                {
                    b.Property<int>("TreatmentOutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TreatmentOutcomeSubType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TreatmentOutcomeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TreatmentOutcomeId");

                    b.ToTable("TreatmentOutcome", "ReferenceData");

                    b.HasData(
                        new
                        {
                            TreatmentOutcomeId = 1,
                            TreatmentOutcomeSubType = "StandardTherapy",
                            TreatmentOutcomeType = "Completed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 2,
                            TreatmentOutcomeSubType = "MdrRegimen",
                            TreatmentOutcomeType = "Completed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 3,
                            TreatmentOutcomeSubType = "Other",
                            TreatmentOutcomeType = "Completed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 4,
                            TreatmentOutcomeSubType = "StandardTherapy",
                            TreatmentOutcomeType = "Cured"
                        },
                        new
                        {
                            TreatmentOutcomeId = 5,
                            TreatmentOutcomeSubType = "MdrRegimen",
                            TreatmentOutcomeType = "Cured"
                        },
                        new
                        {
                            TreatmentOutcomeId = 6,
                            TreatmentOutcomeSubType = "Other",
                            TreatmentOutcomeType = "Cured"
                        },
                        new
                        {
                            TreatmentOutcomeId = 7,
                            TreatmentOutcomeSubType = "TbCausedDeath",
                            TreatmentOutcomeType = "Died"
                        },
                        new
                        {
                            TreatmentOutcomeId = 8,
                            TreatmentOutcomeSubType = "TbContributedToDeath",
                            TreatmentOutcomeType = "Died"
                        },
                        new
                        {
                            TreatmentOutcomeId = 9,
                            TreatmentOutcomeSubType = "TbIncidentalToDeath",
                            TreatmentOutcomeType = "Died"
                        },
                        new
                        {
                            TreatmentOutcomeId = 10,
                            TreatmentOutcomeSubType = "Unknown",
                            TreatmentOutcomeType = "Died"
                        },
                        new
                        {
                            TreatmentOutcomeId = 11,
                            TreatmentOutcomeSubType = "PatientLeftUk",
                            TreatmentOutcomeType = "Lost"
                        },
                        new
                        {
                            TreatmentOutcomeId = 12,
                            TreatmentOutcomeSubType = "PatientNotLeftUk",
                            TreatmentOutcomeType = "Lost"
                        },
                        new
                        {
                            TreatmentOutcomeId = 13,
                            TreatmentOutcomeSubType = "Other",
                            TreatmentOutcomeType = "Lost"
                        },
                        new
                        {
                            TreatmentOutcomeId = 14,
                            TreatmentOutcomeType = "TreatmentStopped"
                        },
                        new
                        {
                            TreatmentOutcomeId = 15,
                            TreatmentOutcomeSubType = "TransferredAbroad",
                            TreatmentOutcomeType = "NotEvaluated"
                        },
                        new
                        {
                            TreatmentOutcomeId = 16,
                            TreatmentOutcomeSubType = "StillOnTreatment",
                            TreatmentOutcomeType = "NotEvaluated"
                        },
                        new
                        {
                            TreatmentOutcomeId = 17,
                            TreatmentOutcomeSubType = "Other",
                            TreatmentOutcomeType = "NotEvaluated"
                        },
                        new
                        {
                            TreatmentOutcomeId = 18,
                            TreatmentOutcomeSubType = "CulturePositive",
                            TreatmentOutcomeType = "Failed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 19,
                            TreatmentOutcomeSubType = "AdditionalResistance",
                            TreatmentOutcomeType = "Failed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 20,
                            TreatmentOutcomeSubType = "AdverseReaction",
                            TreatmentOutcomeType = "Failed"
                        },
                        new
                        {
                            TreatmentOutcomeId = 21,
                            TreatmentOutcomeSubType = "Other",
                            TreatmentOutcomeType = "Failed"
                        });
                });

            modelBuilder.Entity("ntbs_service.Models.ReleaseVersion", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Version");

                    b.ToTable("ReleaseVersion");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityBirthCountryAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityBirthCountry");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityClinicalDatesAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityClinicalDates");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityClusterAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityCluster");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityDotVotAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityDotVotAlert");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityDraftAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityDraft");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityPotentialDuplicateAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.Property<int>("DuplicateId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DataQualityPotientialDuplicate");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityTreatmentOutcome12", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityTreatmentOutcome12");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityTreatmentOutcome24", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityTreatmentOutcome24");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.DataQualityTreatmentOutcome36", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("DataQualityTreatmentOutcome36");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.MBovisAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("EnhancedSurveillanceMBovis");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.MdrAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("EnhancedSurveillanceMDR");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.TestAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.HasDiscriminator().HasValue("Test");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.TransferAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.Property<int?>("CaseManagerId")
                        .HasColumnType("int");

                    b.Property<string>("OtherReasonDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TbServiceCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("TbServiceCode");

                    b.Property<string>("TransferReason")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TransferRequestNote")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasIndex("CaseManagerId");

                    b.HasIndex("TbServiceCode");

                    b.HasDiscriminator().HasValue("TransferRequest");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.TransferRejectedAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.Property<string>("DecliningUserAndTbServiceString")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("TransferRejected");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.UnmatchedLabResultAlert", b =>
                {
                    b.HasBaseType("ntbs_service.Models.Entities.Alerts.Alert");

                    b.Property<string>("SpecimenId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("UnmatchedLabResult");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.Alert", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", "Notification")
                        .WithMany("Alerts")
                        .HasForeignKey("NotificationId");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.LegacyImportNotificationOutcome", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.LegacyImportMigrationRun", null)
                        .WithMany("LegacyImportNotificationOutcomes")
                        .HasForeignKey("LegacyImportMigrationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.CaseManagerTbService", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.User", "CaseManager")
                        .WithMany("CaseManagerTbServices")
                        .HasForeignKey("CaseManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ntbs_service.Models.ReferenceEntities.TBService", "TbService")
                        .WithMany("CaseManagerTbServices")
                        .HasForeignKey("TbServiceCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CaseManager");

                    b.Navigation("TbService");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.DrugResistanceProfile", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithOne("DrugResistanceProfile")
                        .HasForeignKey("ntbs_service.Models.Entities.DrugResistanceProfile", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.LegacyImportNotificationLogMessage", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.LegacyImportMigrationRun", null)
                        .WithMany("LegacyImportNotificationLogMessages")
                        .HasForeignKey("LegacyImportMigrationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisAnimalExposure", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ntbs_service.Models.Entities.MBovisDetails", null)
                        .WithMany("MBovisAnimalExposures")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisDetails", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithOne("MBovisDetails")
                        .HasForeignKey("ntbs_service.Models.Entities.MBovisDetails", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisExposureToKnownCase", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.MBovisDetails", null)
                        .WithMany("MBovisExposureToKnownCases")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisOccupationExposure", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ntbs_service.Models.Entities.MBovisDetails", null)
                        .WithMany("MBovisOccupationExposures")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisUnpasteurisedMilkConsumption", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ntbs_service.Models.Entities.MBovisDetails", null)
                        .WithMany("MBovisUnpasteurisedMilkConsumptions")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.ManualTestResult", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.ManualTestType", "ManualTestType")
                        .WithMany()
                        .HasForeignKey("ManualTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ntbs_service.Models.Entities.TestData", null)
                        .WithMany("ManualTestResults")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ntbs_service.Models.ReferenceEntities.SampleType", "SampleType")
                        .WithMany()
                        .HasForeignKey("SampleTypeId");

                    b.Navigation("ManualTestType");

                    b.Navigation("SampleType");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Notification", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.NotificationGroup", "Group")
                        .WithMany("Notifications")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("ntbs_service.Models.Entities.ClinicalDetails", "ClinicalDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("BCGVaccinationState")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<int?>("BCGVaccinationYear")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DiagnosisDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DotStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<byte>("EnhancedCaseManagementLevel")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0);

                            b1.Property<string>("EnhancedCaseManagementStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<DateTime?>("FirstHomeVisitDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("FirstPresentationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("HIVTestState")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("HealthcareDescription")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("HealthcareSetting")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("HomeVisitCarriedOut")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("IsDotOffered")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<bool?>("IsPostMortem")
                                .HasColumnType("bit");

                            b1.Property<bool?>("IsSymptomatic")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("MDRTreatmentStartDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Notes")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<bool?>("StartedTreatment")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("SymptomStartDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("TBServicePresentationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("TreatmentRegimen")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("TreatmentRegimenOtherDescription")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTime?>("TreatmentStartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("NotificationId");

                            b1.ToTable("ClinicalDetails");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.ComorbidityDetails", "ComorbidityDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("DiabetesStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("HepatitisBStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("HepatitisCStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("LiverDiseaseStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("RenalDiseaseStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("NotificationId");

                            b1.ToTable("ComorbidityDetails");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.ContactTracing", "ContactTracing", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsActiveTB")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsFinishedTreatment")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsIdentified")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsLatentTB")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsScreened")
                                .HasColumnType("int");

                            b1.Property<int?>("AdultsStartedTreatment")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenActiveTB")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenFinishedTreatment")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenIdentified")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenLatentTB")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenScreened")
                                .HasColumnType("int");

                            b1.Property<int?>("ChildrenStartedTreatment")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.ToTable("ContactTracing");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.DenotificationDetails", "DenotificationDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateOfDenotification")
                                .HasColumnType("datetime2");

                            b1.Property<string>("OtherDescription")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("NotificationId");

                            b1.ToTable("DenotificationDetails");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.HospitalDetails", "HospitalDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("CaseManagerId")
                                .HasColumnType("int");

                            b1.Property<string>("Consultant")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<Guid?>("HospitalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("TBServiceCode")
                                .HasColumnType("nvarchar(16)");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("CaseManagerId");

                            b1.HasIndex("HospitalId");

                            b1.HasIndex("TBServiceCode");

                            b1.ToTable("HospitalDetails");

                            b1.HasOne("ntbs_service.Models.Entities.User", "CaseManager")
                                .WithMany()
                                .HasForeignKey("CaseManagerId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Hospital", "Hospital")
                                .WithMany()
                                .HasForeignKey("HospitalId");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.TBService", "TBService")
                                .WithMany()
                                .HasForeignKey("TBServiceCode");

                            b1.Navigation("CaseManager");

                            b1.Navigation("Hospital");

                            b1.Navigation("TBService");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.ImmunosuppressionDetails", "ImmunosuppressionDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<bool?>("HasBioTherapy")
                                .HasColumnType("bit");

                            b1.Property<bool?>("HasOther")
                                .HasColumnType("bit");

                            b1.Property<bool?>("HasTransplantation")
                                .HasColumnType("bit");

                            b1.Property<string>("OtherDescription")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Status")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("NotificationId");

                            b1.ToTable("ImmunosuppressionDetails");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.MDRDetails", "MDRDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("ExposureToKnownCaseStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("NotifiedToPheStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<int?>("RelatedNotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("RelationshipToCase")
                                .HasMaxLength(90)
                                .HasColumnType("nvarchar(90)");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("CountryId");

                            b1.ToTable("MDRDetails");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country")
                                .WithMany()
                                .HasForeignKey("CountryId");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.Navigation("Country");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.PatientDetails", "PatientDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<int?>("CountryId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Dob")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("EthnicityId")
                                .HasColumnType("int");

                            b1.Property<string>("FamilyName")
                                .HasMaxLength(35)
                                .HasColumnType("nvarchar(35)");

                            b1.Property<string>("GivenName")
                                .HasMaxLength(35)
                                .HasColumnType("nvarchar(35)");

                            b1.Property<string>("LocalPatientId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("NhsNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("NhsNumberNotKnown")
                                .HasColumnType("bit");

                            b1.Property<bool>("NoFixedAbode")
                                .HasColumnType("bit");

                            b1.Property<int?>("OccupationId")
                                .HasColumnType("int");

                            b1.Property<string>("OccupationOther")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Postcode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostcodeToLookup")
                                .HasColumnType("nvarchar(10)");

                            b1.Property<int?>("SexId")
                                .HasColumnType("int");

                            b1.Property<int?>("YearOfUkEntry")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("CountryId");

                            b1.HasIndex("EthnicityId");

                            b1.HasIndex("OccupationId");

                            b1.HasIndex("PostcodeToLookup");

                            b1.HasIndex("SexId");

                            b1.ToTable("Patients");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country")
                                .WithMany()
                                .HasForeignKey("CountryId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Ethnicity", "Ethnicity")
                                .WithMany()
                                .HasForeignKey("EthnicityId");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Occupation", "Occupation")
                                .WithMany()
                                .HasForeignKey("OccupationId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.PostcodeLookup", "PostcodeLookup")
                                .WithMany()
                                .HasForeignKey("PostcodeToLookup");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Sex", "Sex")
                                .WithMany()
                                .HasForeignKey("SexId");

                            b1.Navigation("Country");

                            b1.Navigation("Ethnicity");

                            b1.Navigation("Occupation");

                            b1.Navigation("PostcodeLookup");

                            b1.Navigation("Sex");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.PreviousTbHistory", "PreviousTbHistory", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("PreviousTbDiagnosisYear")
                                .HasColumnType("int");

                            b1.Property<int?>("PreviousTreatmentCountryId")
                                .HasColumnType("int");

                            b1.Property<string>("PreviouslyHadTb")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("PreviouslyTreated")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("PreviousTreatmentCountryId");

                            b1.ToTable("PreviousTbHistory");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "PreviousTreatmentCountry")
                                .WithMany()
                                .HasForeignKey("PreviousTreatmentCountryId");

                            b1.Navigation("PreviousTreatmentCountry");
                        });

                    b.OwnsMany("ntbs_service.Models.Entities.PreviousTbService", "PreviousTbServices", b1 =>
                        {
                            b1.Property<int>("PreviousTbServiceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("PhecCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TbServiceCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("TransferDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("PreviousTbServiceId");

                            b1.HasIndex("NotificationId");

                            b1.ToTable("PreviousTbService");

                            b1.WithOwner("Notification")
                                .HasForeignKey("NotificationId");

                            b1.Navigation("Notification");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.SocialRiskFactors", "SocialRiskFactors", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<string>("AlcoholMisuseStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("AsylumSeekerStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("ImmigrationDetaineeStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("MentalHealthStatus")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("NotificationId");

                            b1.ToTable("SocialRiskFactors");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.OwnsOne("ntbs_service.Models.Entities.RiskFactorDetails", "RiskFactorDrugs", b2 =>
                                {
                                    b2.Property<int>("SocialRiskFactorsNotificationId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("InPastFiveYears")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("IsCurrent")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("MoreThanFiveYearsAgo")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Status")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasDefaultValue("Drugs");

                                    b2.HasKey("SocialRiskFactorsNotificationId");

                                    b2.ToTable("RiskFactorDrugs");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialRiskFactorsNotificationId");
                                });

                            b1.OwnsOne("ntbs_service.Models.Entities.RiskFactorDetails", "RiskFactorHomelessness", b2 =>
                                {
                                    b2.Property<int>("SocialRiskFactorsNotificationId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("InPastFiveYears")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("IsCurrent")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("MoreThanFiveYearsAgo")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Status")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasDefaultValue("Homelessness");

                                    b2.HasKey("SocialRiskFactorsNotificationId");

                                    b2.ToTable("RiskFactorHomelessness");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialRiskFactorsNotificationId");
                                });

                            b1.OwnsOne("ntbs_service.Models.Entities.RiskFactorDetails", "RiskFactorImprisonment", b2 =>
                                {
                                    b2.Property<int>("SocialRiskFactorsNotificationId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("InPastFiveYears")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("IsCurrent")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("MoreThanFiveYearsAgo")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Status")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasDefaultValue("Imprisonment");

                                    b2.HasKey("SocialRiskFactorsNotificationId");

                                    b2.ToTable("RiskFactorImprisonment");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialRiskFactorsNotificationId");
                                });

                            b1.OwnsOne("ntbs_service.Models.Entities.RiskFactorDetails", "RiskFactorSmoking", b2 =>
                                {
                                    b2.Property<int>("SocialRiskFactorsNotificationId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("InPastFiveYears")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("IsCurrent")
                                        .HasColumnType("bit");

                                    b2.Property<bool?>("MoreThanFiveYearsAgo")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Status")
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)")
                                        .HasDefaultValue("Smoking");

                                    b2.HasKey("SocialRiskFactorsNotificationId");

                                    b2.ToTable("RiskFactorSmoking");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialRiskFactorsNotificationId");
                                });

                            b1.Navigation("RiskFactorDrugs");

                            b1.Navigation("RiskFactorHomelessness");

                            b1.Navigation("RiskFactorImprisonment");

                            b1.Navigation("RiskFactorSmoking");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.TravelDetails", "TravelDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("Country1Id")
                                .HasColumnType("int");

                            b1.Property<int?>("Country2Id")
                                .HasColumnType("int");

                            b1.Property<int?>("Country3Id")
                                .HasColumnType("int");

                            b1.Property<string>("HasTravel")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<int?>("StayLengthInMonths1")
                                .HasColumnType("int");

                            b1.Property<int?>("StayLengthInMonths2")
                                .HasColumnType("int");

                            b1.Property<int?>("StayLengthInMonths3")
                                .HasColumnType("int");

                            b1.Property<int?>("TotalNumberOfCountries")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("Country1Id");

                            b1.HasIndex("Country2Id");

                            b1.HasIndex("Country3Id");

                            b1.ToTable("TravelDetails");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country1")
                                .WithMany()
                                .HasForeignKey("Country1Id");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country2")
                                .WithMany()
                                .HasForeignKey("Country2Id");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country3")
                                .WithMany()
                                .HasForeignKey("Country3Id");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.Navigation("Country1");

                            b1.Navigation("Country2");

                            b1.Navigation("Country3");
                        });

                    b.OwnsOne("ntbs_service.Models.Entities.VisitorDetails", "VisitorDetails", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<int?>("Country1Id")
                                .HasColumnType("int");

                            b1.Property<int?>("Country2Id")
                                .HasColumnType("int");

                            b1.Property<int?>("Country3Id")
                                .HasColumnType("int");

                            b1.Property<string>("HasVisitor")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<int?>("StayLengthInMonths1")
                                .HasColumnType("int");

                            b1.Property<int?>("StayLengthInMonths2")
                                .HasColumnType("int");

                            b1.Property<int?>("StayLengthInMonths3")
                                .HasColumnType("int");

                            b1.Property<int?>("TotalNumberOfCountries")
                                .HasColumnType("int");

                            b1.HasKey("NotificationId");

                            b1.HasIndex("Country1Id");

                            b1.HasIndex("Country2Id");

                            b1.HasIndex("Country3Id");

                            b1.ToTable("VisitorDetails");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country1")
                                .WithMany()
                                .HasForeignKey("Country1Id");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country2")
                                .WithMany()
                                .HasForeignKey("Country2Id");

                            b1.HasOne("ntbs_service.Models.ReferenceEntities.Country", "Country3")
                                .WithMany()
                                .HasForeignKey("Country3Id");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");

                            b1.Navigation("Country1");

                            b1.Navigation("Country2");

                            b1.Navigation("Country3");
                        });

                    b.Navigation("ClinicalDetails");

                    b.Navigation("ComorbidityDetails");

                    b.Navigation("ContactTracing");

                    b.Navigation("DenotificationDetails");

                    b.Navigation("Group");

                    b.Navigation("HospitalDetails");

                    b.Navigation("ImmunosuppressionDetails");

                    b.Navigation("MDRDetails");

                    b.Navigation("PatientDetails");

                    b.Navigation("PreviousTbHistory");

                    b.Navigation("PreviousTbServices");

                    b.Navigation("SocialRiskFactors");

                    b.Navigation("TravelDetails");

                    b.Navigation("VisitorDetails");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.NotificationSite", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithMany("NotificationSites")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntbs_service.Models.ReferenceEntities.Site", "Site")
                        .WithMany("NotificationSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.SocialContextAddress", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithMany("SocialContextAddresses")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.SocialContextVenue", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithMany("SocialContextVenues")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntbs_service.Models.Entities.VenueType", "VenueType")
                        .WithMany()
                        .HasForeignKey("VenueTypeId");

                    b.Navigation("VenueType");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.TestData", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.Notification", null)
                        .WithOne("TestData")
                        .HasForeignKey("ntbs_service.Models.Entities.TestData", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.TreatmentEvent", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.User", "CaseManager")
                        .WithMany()
                        .HasForeignKey("CaseManagerId");

                    b.HasOne("ntbs_service.Models.Entities.Notification", "Notification")
                        .WithMany("TreatmentEvents")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntbs_service.Models.ReferenceEntities.TBService", "TbService")
                        .WithMany()
                        .HasForeignKey("TbServiceCode");

                    b.HasOne("ntbs_service.Models.ReferenceEntities.TreatmentOutcome", "TreatmentOutcome")
                        .WithMany()
                        .HasForeignKey("TreatmentOutcomeId");

                    b.Navigation("CaseManager");

                    b.Navigation("Notification");

                    b.Navigation("TbService");

                    b.Navigation("TreatmentOutcome");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Hospital", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.TBService", "TBService")
                        .WithMany()
                        .HasForeignKey("TBServiceCode");

                    b.Navigation("TBService");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.LocalAuthorityToPHEC", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.LocalAuthority", "LocalAuthority")
                        .WithOne("LocalAuthorityToPHEC")
                        .HasForeignKey("ntbs_service.Models.ReferenceEntities.LocalAuthorityToPHEC", "LocalAuthorityCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ntbs_service.Models.ReferenceEntities.PHEC", "PHEC")
                        .WithMany()
                        .HasForeignKey("PHECCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LocalAuthority");

                    b.Navigation("PHEC");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.ManualTestTypeSampleType", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.ManualTestType", "ManualTestType")
                        .WithMany("ManualTestTypeSampleTypes")
                        .HasForeignKey("ManualTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ntbs_service.Models.ReferenceEntities.SampleType", "SampleType")
                        .WithMany("ManualTestTypeSampleTypes")
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ManualTestType");

                    b.Navigation("SampleType");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.PostcodeLookup", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.LocalAuthority", "LocalAuthority")
                        .WithMany("PostcodeLookups")
                        .HasForeignKey("LocalAuthorityCode");

                    b.Navigation("LocalAuthority");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.TBService", b =>
                {
                    b.HasOne("ntbs_service.Models.ReferenceEntities.PHEC", "PHEC")
                        .WithMany()
                        .HasForeignKey("PHECCode");

                    b.Navigation("PHEC");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Alerts.TransferAlert", b =>
                {
                    b.HasOne("ntbs_service.Models.Entities.User", "CaseManager")
                        .WithMany()
                        .HasForeignKey("CaseManagerId");

                    b.HasOne("ntbs_service.Models.ReferenceEntities.TBService", "TbService")
                        .WithMany()
                        .HasForeignKey("TbServiceCode");

                    b.Navigation("CaseManager");

                    b.Navigation("TbService");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.LegacyImportMigrationRun", b =>
                {
                    b.Navigation("LegacyImportNotificationLogMessages");

                    b.Navigation("LegacyImportNotificationOutcomes");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.MBovisDetails", b =>
                {
                    b.Navigation("MBovisAnimalExposures");

                    b.Navigation("MBovisExposureToKnownCases");

                    b.Navigation("MBovisOccupationExposures");

                    b.Navigation("MBovisUnpasteurisedMilkConsumptions");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.Notification", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("DrugResistanceProfile");

                    b.Navigation("MBovisDetails");

                    b.Navigation("NotificationSites");

                    b.Navigation("SocialContextAddresses");

                    b.Navigation("SocialContextVenues");

                    b.Navigation("TestData");

                    b.Navigation("TreatmentEvents");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.NotificationGroup", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.TestData", b =>
                {
                    b.Navigation("ManualTestResults");
                });

            modelBuilder.Entity("ntbs_service.Models.Entities.User", b =>
                {
                    b.Navigation("CaseManagerTbServices");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.LocalAuthority", b =>
                {
                    b.Navigation("LocalAuthorityToPHEC");

                    b.Navigation("PostcodeLookups");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.ManualTestType", b =>
                {
                    b.Navigation("ManualTestTypeSampleTypes");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.SampleType", b =>
                {
                    b.Navigation("ManualTestTypeSampleTypes");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.Site", b =>
                {
                    b.Navigation("NotificationSites");
                });

            modelBuilder.Entity("ntbs_service.Models.ReferenceEntities.TBService", b =>
                {
                    b.Navigation("CaseManagerTbServices");
                });
#pragma warning restore 612, 618
        }
    }
}
