@page "/Notifications/{notificationId:int}/Edit/PatientDetails/{handler?}"
@model ntbs_service.Pages.Notifications.Edit.PatientDetailsModel
@using Castle.Core.Internal
@using NHSUK.FrontEndLibrary.TagHelpers
@using static NHSUK.FrontEndLibrary.TagHelpers.FormGroupType

@{
    Layout = "../../Shared/_NotificationEditLayout.cshtml";
    var title = NotificationSection.PersonalDetails.ToDisplayString();
    ViewData["Title"] = $"Notification #{Model.NotificationId} - {title}";
    var fullValidation = Model.PatientDetails.ShouldValidateFull ? "True" : "False";
}

<partial name="_SinglePageErrorSummaryPartial"/>

<h2> @title </h2>

<div>

    @{
        var isWarningHidden = (Model.DuplicateNhsNumberNotifications == null || Model.DuplicateNhsNumberNotifications.Count == 0);
        var requiresPrependedComma = false;
    }
    <nhs-number-duplicate-warning inline-template>
        <div>
            <govuk-warning-text id="nhs-number-warning" ref="nhs-number-warning" is-hidden="@isWarningHidden">
                <strong>NHS number is already associated with the following notification(s), please review:</strong>
                <div ref="warning-container" id="nhs-number-links">
                    @if (Model.DuplicateNhsNumberNotifications != null)
                    {
                        foreach (var (id, url) in Model.DuplicateNhsNumberNotifications)
                        {
                            if (requiresPrependedComma)
                            {
                                @:,
                            }
                            if (!url.Contains("Legacy"))
                            {
                                <a href="@url" target="_blank" title="Open notification overview for notification #@id">#@id</a>
                            }
                            else
                            {
                                <a href="@url" target="_blank" title="Open import page for notification @id">@id</a>
                            }

                            requiresPrependedComma = true;
                        }
                    }
                </div>
            </govuk-warning-text>

            <nhs-fieldset aria-describedby="nhs-number-error" id="PatientDetails-NhsNumber">
                <nhs-fieldset-legend nhs-legend-size="Standard">
                    NHS Number (required)
                </nhs-fieldset-legend>
                <nhs-form-group nhs-form-group-type="Standard">
                    <div class="nhsuk-radios govuk-radios--conditional" data-module="govuk-radios">
                        <div class="nhsuk-radios__item">
                            <input asp-for="PatientDetails.NhsNumberNotKnown" class="nhsuk-radios__input" type="radio"
                                   value="false" data-aria-controls="conditional-nhs-number-conditional" id="nhs-number-known">
                            <label nhs-label-type="Radios" for="nhs-number-known">
                                Known
                            </label>
                        </div>
                        <div class="govuk-radios__conditional govuk-radios__conditional--hidden"
                             id="conditional-nhs-number-conditional">
                            <validate-input model="PatientDetails" property="NhsNumber" shouldvalidatefull="@fullValidation"
                                            v-on:valid="handleValid" v-on:invalid="handleInvalid" inline-template>
                                @{
                                    var hasNhsNumberError = !Model.IsValid("PatientDetails.NhsNumber");
                                    var nhsNumberErrorGroup = hasNhsNumberError ? Error : Standard;
                                }
                                <nhs-form-group nhs-form-group-type="@nhsNumberErrorGroup" aria-describedby="nhs-number-error">
                                    <label asp-for="PatientDetails.NhsNumber" class="govuk-visually-hidden">Please provide NHS number</label>
                                    <span nhs-span-type="ErrorMessage" id="nhs-number-error" ref="errorField"
                                          asp-validation-for="PatientDetails.NhsNumber" has-error="@hasNhsNumberError"></span>
                                    <input ref="inputField" v-on:blur="validate" is-error-input=@hasNhsNumberError nhs-input-type="Standard"
                                           fixed-width="Ten" asp-for="PatientDetails.NhsNumber" aria-describedby="nhs-number-warning">
                                </nhs-form-group>
                            </validate-input>
                        </div>

                        <div class="nhsuk-radios__item">
                            <input asp-for="PatientDetails.NhsNumberNotKnown" class="nhsuk-radios__input" type="radio"
                                   value="true" id="nhs-number-unknown">
                            <label nhs-label-type="Radios" for="nhs-number-unknown">
                                Not known
                            </label>
                        </div>
                    </div>
                </nhs-form-group>
            </nhs-fieldset>
        </div>
    </nhs-number-duplicate-warning>
    <br />

    <validate-input model="PatientDetails" property="GivenName" shouldvalidatefull="@fullValidation" inline-template>
        @{
            var hasGivenNameError = !Model.IsValid("PatientDetails.GivenName");
            var givenNameGroupState = hasGivenNameError ? Error : Standard;
        }
        <nhs-form-group nhs-form-group-type=@givenNameGroupState id="PatientDetails-GivenName">
            <label nhs-label-type="Standard" asp-for="PatientDetails.GivenName">
                Given name (required)
            </label>
            <span ref="errorField" nhs-span-type="ErrorMessage" id="given-name-error"
                  asp-validation-for="PatientDetails.GivenName" has-error="@hasGivenNameError"></span>
            <input ref="inputField" v-on:blur="validate" is-error-input=@hasGivenNameError
                   nhs-input-type="Standard" asp-for="PatientDetails.GivenName" fixed-width="Ten" autocomplete="PatientDetails.GivenName">
        </nhs-form-group>
    </validate-input>

    <validate-input model="PatientDetails" property="FamilyName" shouldvalidatefull="@fullValidation" inline-template>
        @{
            var hasFamilyNameError = !Model.IsValid("PatientDetails.FamilyName");
            var familyNameGroupState = hasFamilyNameError ? Error : Standard;
        }
        <nhs-form-group nhs-form-group-type=@familyNameGroupState id="PatientDetails-FamilyName">
            <label nhs-label-type="Standard" asp-for="PatientDetails.FamilyName">
                Family name (required)
            </label>
            <span ref="errorField" nhs-span-type="ErrorMessage" id="family-name-error"
                  asp-validation-for="PatientDetails.FamilyName" has-error="@hasFamilyNameError"></span>
            <input ref="inputField" v-on:blur="validate" is-error-input=@hasFamilyNameError
                   nhs-input-type="Standard" asp-for="PatientDetails.FamilyName" fixed-width="Ten" autocomplete="PatientDetails.FamilyName" />
        </nhs-form-group>
    </validate-input>
    <br />

    <validate-date model="PatientDetails" property="Dob" inline-template>
        @{
            var hasDobError = !Model.IsValid("PatientDetails.Dob") || !Model.IsValid("FormattedDob");
            var dobGroupState = hasDobError ? Error : Standard;
        }
        <nhs-form-group nhs-form-group-type=@dobGroupState id="PatientDetails-Dob">
            <nhs-fieldset aria-describedby="dob-error" role="group">
                <nhs-fieldset-legend nhs-legend-size="Standard">
                    Date of birth (required)
                </nhs-fieldset-legend>
                <span nhs-span-type="ErrorMessage" ref="errorField" id="dob-error" has-error="@hasDobError">
                    <span style="display:block" asp-validation-for="PatientDetails.Dob"></span>
                    <span style="display:block" asp-validation-for="FormattedDob"></span>
                </span>
                <nhs-date-input id="dob">
                    <nhs-date-input-item>
                        <nhs-form-group nhs-form-group-type="Standard">
                            <label nhs-label-type="Date" asp-for="FormattedDob.Day">Day</label>
                            <input v-on:blur="validate" ref="dayInput" nhs-input-type="Date" fixed-width="Two"
                                   is-error-input=@hasDobError asp-for="FormattedDob.Day" />
                        </nhs-form-group>
                    </nhs-date-input-item>
                    <nhs-date-input-item>
                        <nhs-form-group nhs-form-group-type="Standard">
                            <label nhs-label-type="Date" asp-for="FormattedDob.Month">Month</label>
                            <input v-on:blur="validate" ref="monthInput" nhs-input-type="Date" fixed-width="Two"
                                   is-error-input=@hasDobError asp-for="FormattedDob.Month" />
                        </nhs-form-group>
                    </nhs-date-input-item>
                    <nhs-date-input-item>
                        <nhs-form-group nhs-form-group-type="Standard">
                            <label nhs-label-type="Date" asp-for="FormattedDob.Year">Year</label>
                            <input v-on:blur="validate" ref="yearInput" nhs-input-type="Date" fixed-width="Four"
                                   is-error-input=@hasDobError asp-for="FormattedDob.Year" />
                        </nhs-form-group>
                    </nhs-date-input-item>
                </nhs-date-input>
            </nhs-fieldset>
        </nhs-form-group>
    </validate-date>
    <br />

    @{
        var hasSexError = !Model.IsValid("PatientDetails.SexId");
        var sexErrorGroupState = hasSexError ? Error : Standard;
    }
    <validate-input model="PatientDetails" property="SexId" shouldvalidatefull="@fullValidation" inline-template>
        <nhs-form-group nhs-form-group-type="@sexErrorGroupState" id="PatientDetails-SexId">
            <nhs-fieldset>
                <nhs-fieldset-legend nhs-legend-size="Standard">
                    Sex (required)
                </nhs-fieldset-legend>
                <span nhs-span-type="ErrorMessage" id="sex-error" ref="errorField" asp-validation-for="PatientDetails.SexId" has-error="@hasSexError"></span>
                <nhs-radios v-on:change="validate" nhs-radios-type="Standard">
                    @foreach (var sex in Model.Sexes)
                    {
                        <nhs-radios-item>
                            <input is-error-input=@hasSexError nhs-input-type="Radios" asp-for="PatientDetails.SexId" type="radio" value="@sex.SexId" id="sexId-@sex.SexId" />
                            <label nhs-label-type="Radios" asp-for="PatientDetails.SexId" for="sexId-@sex.SexId">@sex.Label</label>
                        </nhs-radios-item>
                    }
                </nhs-radios>
            </nhs-fieldset>
        </nhs-form-group>
    </validate-input>
    <br />

    @{
        var hasEthnicityError = !Model.IsValid("PatientDetails.EthnicityId");
        var ethnicityErrorGroupState = hasEthnicityError ? Error : Standard;
        var ethnicitySelectErrorState = hasEthnicityError ? SelectType.Error : SelectType.Standard;
    }
    <validate-input model="PatientDetails" property="EthnicityId" shouldvalidatefull="@fullValidation" inline-template>
        <nhs-form-group nhs-form-group-type="@ethnicityErrorGroupState" id="PatientDetails-EthnicityId">
            <label nhs-label-type="Standard" asp-for="PatientDetails.EthnicityId">
                Ethnic group (required)
            </label>
            <span nhs-span-type="ErrorMessage" id="ethnicity-error" ref="errorField"
                  asp-validation-for="PatientDetails.EthnicityId" has-error="@hasEthnicityError"></span>
            <select v-on:change="validate" ref="selectField" nhs-select-type="@ethnicitySelectErrorState"
                    asp-for="PatientDetails.EthnicityId" asp-items="Model.Ethnicities">
                <option value="">Select Ethnic group</option>
            </select>
        </nhs-form-group>
    </validate-input>
    <br />

    <validate-input model="PatientDetails" property="LocalPatientId" inline-template>
        @{
            var hasLocalPatientIdError = !Model.IsValid("PatientDetails.LocalPatientId");
            var localPatientIdGroupState = hasLocalPatientIdError ? Error : Standard;
        }
        <nhs-form-group nhs-form-group-type=@localPatientIdGroupState id="PatientDetails-LocalPatientId">
            <label nhs-label-type="Standard" asp-for="PatientDetails.LocalPatientId">Local patient Id</label>
            <span ref="errorField" nhs-span-type="ErrorMessage" id="local-patient-id-error"
                  asp-validation-for="PatientDetails.LocalPatientId" has-error="@hasLocalPatientIdError"></span>
            <input ref="inputField" v-on:input="validate" is-error-input=@hasLocalPatientIdError
                   nhs-input-type="Standard" asp-for="PatientDetails.LocalPatientId" fixed-width="Ten" />
        </nhs-form-group>
    </validate-input>
    <br />

    @{
        var countryConditionalValues = Json.Serialize(Model.RenderConditionalCountryFieldIds);
        var countryConditionFunctionString = $"function(value) {{ return value && {countryConditionalValues}.indexOf(value) === -1 }}";

    }
    <conditional-select-wrapper :value-condition-function='@countryConditionFunctionString' inline-template>
        <nhs-fieldset>
            <nhs-fieldset-legend nhs-legend-size="Standard">
                Birth country (required)
            </nhs-fieldset-legend>
            @{
                var hasCountryError = !Model.IsValid("PatientDetails.CountryId");
                var countryGroupState = hasCountryError ? Error : Standard;
                var countrySelectErrorClass = hasCountryError ? "nhsuk-select--error" : "";
            }
            <validate-input model="PatientDetails" property="CountryId" shouldvalidatefull="@fullValidation"
                            v-on:validate="handleChange" v-on:mounted="innerValidateMounted" ref="inner-validate" inline-template>
                <nhs-form-group nhs-form-group-type="@countryGroupState" id="PatientDetails-CountryId">
                    <label nhs-label-type="Standard" asp-for="PatientDetails.CountryId" classes="govuk-visually-hidden">
                        Birth country (required)
                    </label>
                    <span nhs-span-type="ErrorMessage" id="birth-country-error"
                          ref="errorField" asp-validation-for="PatientDetails.CountryId" has-error="@hasCountryError"></span>
                    <div ref="selectField" data-aria-controls="year-of-entry-conditional" class=@countrySelectErrorClass>
                        <autocomplete-select v-on:input-changed="validate" placeholder="Select a Birth Country" validate="true" inline-template>
                            <select asp-for="PatientDetails.CountryId" asp-items="Model.Countries" ref="selectField">
                                <option value=""></option>
                            </select>
                        </autocomplete-select>
                    </div>
                </nhs-form-group>
            </validate-input>

            @{
                var hasYearOfEntryError = !Model.IsValid("PatientDetails.YearOfUkEntry");
                var yearOfEntryFormState = hasYearOfEntryError ? Error : Standard;
            }
            <div ref="conditional-control" id="year-of-entry-conditional" class="govuk-radios__conditional">
                <validate-input model="PatientDetails" property="YearOfUkEntry" shouldvalidatefull="@fullValidation" inline-template>
                    <nhs-form-group nhs-form-group-type="@yearOfEntryFormState" ref="formGroup" id="PatientDetails-YearOfUkEntry">
                        <label for="year-of-entry" nhs-label-type="Standard" id="year-of-entry-label">
                            Year of UK Entry
                        </label>
                        <span nhs-span-type="ErrorMessage" asp-validation-for="PatientDetails.YearOfUkEntry"
                              has-error="@hasYearOfEntryError" ref="errorField" id="year-of-entry-error"></span>
                        <input nhs-input-type="Standard" asp-for="PatientDetails.YearOfUkEntry" is-error-input="@hasYearOfEntryError"
                               v-on:blur="validate" ref="inputField" fixed-width="Four" id="year-of-entry" aria-describedby="year-of-entry-error" />
                    </nhs-form-group>
                </validate-input>
            </div>
        </nhs-fieldset>
    </conditional-select-wrapper>
    <br />

    @{
        var hasAddressError = !Model.IsValid("PatientDetails.Address");
        var addressFormState = hasAddressError ? Error : Standard;
        var addressTextAreaType = hasAddressError ? TextAreaType.Error : TextAreaType.Standard;
    }
    <validate-input model="PatientDetails" property="Address" shouldvalidatefull="@fullValidation" inline-template>
        <nhs-form-group nhs-form-group-type="@addressFormState" id="PatientDetails-Address">
            <label asp-for="PatientDetails.Address" nhs-label-type="Standard">
                Address (usual place of residence)
            </label>
            <span nhs-span-type="ErrorMessage" id="address-error" ref="errorField" asp-validation-for="PatientDetails.Address" has-error="@hasAddressError"></span>
            <textarea asp-for="PatientDetails.Address" nhs-textarea-type="@addressTextAreaType" rows="2" aria-describedby="address-error"
                      autocomplete="PatientDetails.Address" v-on:change="validate" ref="textareaField" classes="nhsuk-input--width-20"></textarea>
        </nhs-form-group>
    </validate-input>

    <nhs-fieldset aria-describedby="postcode-error" id="PatientDetails-Postcode">
        <nhs-fieldset-legend nhs-legend-size="Standard">
            Postcode (required)
        </nhs-fieldset-legend>
        <nhs-form-group nhs-form-group-type="Standard">
            <div class="nhsuk-radios govuk-radios--conditional" data-module="govuk-radios">
                <div class="nhsuk-radios__item">
                    <input asp-for="PatientDetails.NoFixedAbode" id="postcode-yes" class="nhsuk-radios__input" type="radio" value="false"
                           data-aria-controls="conditional-postcode-conditional">
                    <label class="nhsuk-label nhsuk-radios__label" for="postcode-yes">
                        Usual place of residence
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-postcode-conditional">
                    <validate-postcode shouldvalidatefull="@fullValidation" inline-template>
                        @{
                            var hasPostcodeError = !Model.IsValid("PatientDetails.Postcode");
                            var postcodeGroupState = hasPostcodeError ? Error : Standard;
                        }
                        <nhs-form-group ref="formGroup" nhs-form-group-type="@postcodeGroupState" aria-describedby="postcode-error">
                            <label asp-for="PatientDetails.Postcode" class="govuk-visually-hidden">Please provide postcode</label>
                            <span nhs-span-type="ErrorMessage" id="postcode-error" ref="errorField"
                                  asp-validation-for="PatientDetails.Postcode" has-error="@hasPostcodeError"></span>
                            <input ref="inputField" v-on:blur="validate" is-error-input=@hasPostcodeError nhs-input-type="Standard"
                                   fixed-width="Ten" asp-for="PatientDetails.Postcode">
                        </nhs-form-group>
                    </validate-postcode>
                </div>
                <div class="nhsuk-radios__item">
                    <input asp-for="PatientDetails.NoFixedAbode" class="nhsuk-radios__input" type="radio" value="true" id="postcode-no">
                    <label class="nhsuk-label nhsuk-radios__label" for="postcode-no">
                        No fixed abode
                    </label>
                </div>
            </div>
        </nhs-form-group>
    </nhs-fieldset>


    @{
        var occupationsWithConditionalFields = Json.Serialize(Model.RenderConditionalOccupationFieldIds);
        var occupationConditionFunctionString = $"function(value) {{ return value && {occupationsWithConditionalFields}.indexOf(value) !== -1 }}";
    }
    <conditional-select-wrapper :value-condition-function='@occupationConditionFunctionString' inline-template>
        <nhs-fieldset>
            <nhs-fieldset-legend nhs-legend-size="Standard">
                Occupation
            </nhs-fieldset-legend>
            @{
                var hasOccupationError = !Model.IsValid("PatientDetails.OccupationId");
                var occupationFormState = hasAddressError ? Error : Standard;
                var occupationSelectErrorState = hasAddressError ? SelectType.Error : SelectType.Standard;
            }
            <validate-input model="PatientDetails" property="OccupationId" shouldvalidatefull="@fullValidation"
                            v-on:validate="handleChange" v-on:mounted="innerValidateMounted" ref="inner-validate" inline-template>
                <nhs-form-group nhs-form-group-type="@occupationFormState" id="PatientDetails-OccupationId">
                    <label nhs-label-type="Standard" asp-for="PatientDetails.OccupationId" classes="govuk-visually-hidden">
                        Occupation
                    </label>
                    <span nhs-span-type="ErrorMessage"
                          ref="errorField" asp-validation-for="PatientDetails.OccupationId" has-error="@hasOccupationError"></span>
                    <select ref="selectField" v-on:change="validate" nhs-select-type="@occupationSelectErrorState"
                            asp-for="PatientDetails.OccupationId" asp-items="Model.Occupations"
                            data-aria-controls="occupation-other-conditional">
                        <option value="">Select an occupation</option>
                    </select>
                </nhs-form-group>
            </validate-input>

            @{
                var hasOccupationOtherError = !Model.IsValid("PatientDetails.OccupationOther");
                var occupationOtherFormState = hasOccupationOtherError ? Error : Standard;
            }
            <div ref="conditional-control" id="occupation-other-conditional" class="govuk-radios__conditional">
                <validate-input model="PatientDetails" property="OccupationOther" shouldvalidatefull="@fullValidation" inline-template>
                    <nhs-form-group nhs-form-group-type="@occupationOtherFormState" ref="formGroup" id="PatientDetails-OccupationOther">
                        <label for="occupation-other" nhs-label-type="Standard">
                            Other (please specify)
                        </label>
                        <span nhs-span-type="ErrorMessage" asp-validation-for="PatientDetails.OccupationOther"
                              has-error="@hasOccupationOtherError" ref="errorField" id="occupation-other-error"></span>
                        <input nhs-input-type="Standard" asp-for="PatientDetails.OccupationOther" is-error-input="@hasOccupationOtherError"
                               v-on:blur="validate" ref="inputField" fixed-width="Twenty" id="occupation-other" aria-describedby="occupation-other-error" />
                    </nhs-form-group>
                </validate-input>
            </div>
        </nhs-fieldset>
    </conditional-select-wrapper>

    <br />
    
</div>
