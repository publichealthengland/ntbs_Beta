@page "/Notifications/{NotificationId:int}/Transfer/{handler?}"

@using ntbs_service.Helpers
@using ntbs_service.Models.Enums
@using static NHSUK.FrontEndLibrary.TagHelpers.FormGroupType
@model ntbs_service.Pages.AlertsAndActions.TransferRequestModel
@using NHSUK.FrontEndLibrary.TagHelpers

@{
    Layout = "../Shared/_NotificationLayout.cshtml";
    ViewData["Title"] = $"Transfer Request - {Model.AlertId}";
}

<nhs-width-container container-width="Standard">
    <form method="post" autocomplete="off">
        <h2> You are about to transfer this notification </h2>
        <nhs-hint nhs-hint-type="Standard" id="ntbs-service-directory-hint">
            You can search for TB services and case managers in the <a class="nhsuk-action-link" href=/ServiceDirectory>NTBS service directory</a> if you are not sure of the TB service name
        </nhs-hint> <br>
        <div>
            <filtered-dropdown filter-handler-path="FilteredCaseManagersListByTbServiceCode" :filtering-refs="['caseManagers']" :should-filter-on-load="true" inline-template>
                <div>
                    @{
                        var hasTbServiceCodeError = !Model.ValidationService.IsValid("TransferRequest.TbServiceCode");
                        var tbServiceCodeGroupState = hasTbServiceCodeError ? Error : Standard;
                        var tbServiceCodeSelectErrorState = hasTbServiceCodeError ? SelectType.Error : SelectType.Standard;
                    }
                    <nhs-form-group nhs-form-group-type="@tbServiceCodeGroupState" id="TransferRequest-TbServiceCode" ref="tbServices">
                        <label nhs-label-type="Standard" asp-for="TransferRequest.TbServiceCode">
                            @Html.DisplayNameFor(model => model.TransferRequest.TbServiceCode)
                        </label>
                        <span nhs-span-type="ErrorMessage" id="tb-service-error" has-error="@hasTbServiceCodeError"
                              ref="errorField" asp-validation-for="TransferRequest.TbServiceCode"></span>
                        <autocomplete-select ref="filterContainer" v-on:mounted="filteringMounted" v-on:input-changed="filteringChanged"
                                             placeholder="Select TB service" emit-change-on="select" inline-template>
                            @* below id necessary to disable automcomplete in chrome - see https://adamsilver.io/blog/stopping-chrome-from-ignoring-autocomplete-off/ *@
                            <select ref="selectField"
                                    nhs-select-type="@tbServiceCodeSelectErrorState"
                                    asp-for="TransferRequest.TbServiceCode"
                                    asp-items="Model.TbServices"
                                    id="selectTBService">
                                <option value=""></option>
                            </select>
                        </autocomplete-select>
                    </nhs-form-group>
                    @{
                        var hasCaseManagerError = !Model.ValidationService.IsValid("TransferRequest.CaseManagerId");
                        var caseManagerGroupState = hasCaseManagerError ? Error : Standard;
                        var caseManagerSelectErrorState = hasCaseManagerError ? SelectType.Error : SelectType.Standard;
                    }
                    <nhs-form-group nhs-form-group-type="@caseManagerGroupState" id="TransferRequest-CaseManagerId" ref="caseManagers">
                        <label nhs-label-type="Standard" asp-for="TransferRequest.CaseManagerId">
                            @Html.DisplayNameFor(model => model.TransferRequest.CaseManagerId)
                        </label>
                        <span nhs-span-type="ErrorMessage" id="case-manager-error" has-error="@hasCaseManagerError"
                            ref="errorField" asp-validation-for="TransferRequest.CaseManagerId"></span>
                        <select ref="selectField" nhs-select-type="@caseManagerSelectErrorState" asp-for="TransferRequest.CaseManagerId"
                                asp-items="Model.CaseManagers">
                            <option value="" selected>Please select</option>
                        </select>
                    </nhs-form-group>
                </div>
            </filtered-dropdown>
        </div>

        @{
            var hasReasonError = !Model.ValidationService.IsValid("TransferRequest.TransferReason");
            var reasonFormGroupType = hasReasonError ? Error : Standard;
        }
        <nhs-form-group nhs-form-group-type="@reasonFormGroupType">
            <nhs-fieldset aria-describedby="reason-error">
                <nhs-fieldset-legend nhs-legend-size="Standard">
                    Reason for transfer (required)
                </nhs-fieldset-legend>

                <span id="reason-error" nhs-span-type="ErrorMessage" asp-validation-for="TransferRequest.TransferReason" has-error="@hasReasonError"></span>

                <div class="nhsuk-radios govuk-radios--conditional" data-module="govuk-radios">
                    @foreach (TransferReason reason in Enum.GetValues(typeof(TransferReason)))
                    {

                        var id = $"transfer-radio-{reason}";
                        var displayText = reason.GetDisplayName();
                        if (reason != TransferReason.Other)
                        {
                            <div class="nhsuk-radios__item">
                                <input asp-for="TransferRequest.TransferReason" nhs-input-type="Radios" type="radio"
                                    value="@reason" id="@id" aria-describedby="reason-error">
                                <label nhs-label-type="Radios" for="@id">
                                    @displayText
                                </label>
                            </div>
                        }
                        else
                        {
                            <div class="nhsuk-radios__item">
                                <input asp-for="TransferRequest.TransferReason" nhs-input-type="Radios" type="radio"
                                    value="@reason" id="@id" data-aria-controls="conditional-radio" aria-describedby="reason-error">
                                <label nhs-label-type="Radios" for="@id">
                                    @displayText
                                </label>
                            </div>
                        }
                    }

                    @{
                        var hasReasonDescriptionError = !Model.ValidationService.IsValid("TransferRequest.OtherReasonDescription");
                        var reasonDescriptionFormGroupType = hasReasonDescriptionError ? Error : Standard;
                    }

                    <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-radio">
                        <nhs-form-group nhs-form-group-type="@reasonDescriptionFormGroupType">
                            <label asp-for="TransferRequest.OtherReasonDescription" nhs-label-type="Standard">
                                Provide reason
                            </label>
                            <span id="description-error" nhs-span-type="ErrorMessage" asp-validation-for="TransferRequest.OtherReasonDescription" has-error="@hasReasonDescriptionError"></span>
                            <input asp-for="TransferRequest.OtherReasonDescription" nhs-input-type="Standard" is-error-input="@hasReasonDescriptionError" aria-describedby="description-error" />
                        </nhs-form-group>
                    </div>
                </div>
            </nhs-fieldset>
        </nhs-form-group>
        
        <validate-date model="TransferRequest" property="TransferDate" notification_id="@Model.Notification.NotificationId" inline-template>
            @{
                var hasEventDateError = !Model.ValidationService.IsValid("TransferRequest.TransferDate");
                var eventDateGroupState = hasEventDateError ? Error : Standard;
            }
    
            <nhs-form-group nhs-form-group-type=@eventDateGroupState>
                <nhs-fieldset aria-describedby="transfer-date-error" role="group">
                    <nhs-fieldset-legend nhs-legend-size="Standard" classes="govuk-visually-hidden">
                        Transfer date
                    </nhs-fieldset-legend>
                    <span nhs-span-type="ErrorMessage" ref="errorField"
                          id="transfer-date-error" asp-validation-for="TransferRequest.TransferDate" has-error="@hasEventDateError"></span>
                    <nhs-date-input id="notification-date">
                        <nhs-date-input-item>
                            <nhs-form-group nhs-form-group-type="Standard">
                                <label nhs-label-type="Date" asp-for="FormattedTransferDate.Day">Day</label>
                                <input v-on:blur="validate" ref="dayInput" nhs-input-type="Date" fixed-width="Two"
                                       is-error-input=@hasEventDateError asp-for="FormattedTransferDate.Day" />
                            </nhs-form-group>
                        </nhs-date-input-item>
                        <nhs-date-input-item>
                            <nhs-form-group nhs-form-group-type="Standard">
                                <label nhs-label-type="Date" asp-for="FormattedTransferDate.Month">Month</label>
                                <input v-on:blur="validate" ref="monthInput" nhs-input-type="Date" fixed-width="Two"
                                       is-error-input=@hasEventDateError asp-for="FormattedTransferDate.Month" />
                            </nhs-form-group>
                        </nhs-date-input-item>
                        <nhs-date-input-item>
                            <nhs-form-group nhs-form-group-type="Standard">
                                <label nhs-label-type="Date" asp-for="FormattedTransferDate.Year">Year</label>
                                <input v-on:blur="validate" ref="yearInput" nhs-input-type="Date" fixed-width="Four"
                                       is-error-input=@hasEventDateError asp-for="FormattedTransferDate.Year" />
                            </nhs-form-group>
                        </nhs-date-input-item>
                    </nhs-date-input>
                </nhs-fieldset>
            </nhs-form-group>
        </validate-date>

        @{
            var hasRequestNoteError = !Model.ValidationService.IsValid("TransferRequest.TransferRequestNote");
            var requestNoteFormGroupType = hasRequestNoteError ? Error : Standard;
        }

        <nhs-form-group nhs-form-group-type="@requestNoteFormGroupType">
            <label asp-for="TransferRequest.TransferRequestNote" nhs-label-type="Standard">
                Add optional note to display to receiving case manager
            </label>
            <span id="optional-note-error" nhs-span-type="ErrorMessage" asp-validation-for="TransferRequest.TransferRequestNote" has-error="@hasRequestNoteError"></span>
            <input asp-for="TransferRequest.TransferRequestNote" nhs-input-type="Standard" is-error-input="@hasRequestNoteError" aria-describedby="optional-note-error" />
        </nhs-form-group>

        <div class="flex-container">
            <button id="confirm-transfer-button" nhs-button-type="Standard" classes="confirm-transfer-button ntbsuk-button--primary">
                Confirm transfer
            </button>

            <nhs-back-link href="@RouteHelper.GetNotificationPath(Model.NotificationId, NotificationSubPaths.Overview)" classes="transfer-request-back-link">
                Cancel & go back
            </nhs-back-link>
        </div>
    </form>
</nhs-width-container>
